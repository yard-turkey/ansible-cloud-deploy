# Passable Vars ('-e var=val')
#   tag_name (Required)
#   num_node (default: 3)
#   install_ocp (default: true)
- hosts: localhost 
  gather_facts: False

  tasks:
  - import_tasks: tasks/check-ssh.yaml

  - name: spin up instances
    ec2:
      key_name: "{{ ssh_key }}"
      group_id: "{{ sec_group_id }}" 
      ec2_region: "{{ region  }}" 
      ec2_zone: "{{ zone }}"
      instance_type: "{{ machine_type }}"
      vpc_subnet_id: "{{ subnet_id }}"
      image: "{{ ami_id }}"
      wait: true
      exact_count: "{{ num_nodes }}" 
      count_tag:
        Name: "{{ tag_name }}"
      instance_tags: "{{ {'kubernetes.io/cluster/' ~ tag_name: tag_name, 'Name': tag_name } }}"
    register: ec2

  - add_host:
      hostname: "{{ item.public_dns_name }}"
      public_ip: "{{ item.public_ip }}"
      private_dns_name: "{{ item.private_dns_name  }}"
      private_ip: "{{ item.private_ip }}"
      groups: ec2hosts
    loop: "{{ ec2.instances }}"

- hosts: ec2hosts
  name: wait for ssh to come up
  remote_user: "{{ ssh_login }}"
  gather_facts: false
  
  tasks:
  - wait_for_connection:
      delay: 20
      timeout: 120 

# Everything after this can be modified to our needs. 
- hosts: ec2hosts
  name: configuration
  remote_user:  "{{ ssh_login }}"
  gather_facts: True
  become: yes
  vars:
    known_hosts_path: /root/.ssh/known_hosts
    key_path: /root/.ssh/ocp_key
  environment:
    OCP_CLUSTER_ID: "{{ tag_name }}"
    AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}" 
    AWS_ACCESS_SECRET_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    ANSIBLE_HOST_KEY_CHECKING: false
 
  tasks:
  - name: check docker service
    service: name=docker state=started

  - name: Set aws access key
    lineinfile:
      path: /root/.bashrc
      regexp: 'export AWS_ACCESS_KEY_ID=.*'
      line: "export AWS_ACCESS_KEY_ID={{ lookup( 'env', 'AWS_ACCESS_KEY_ID') }}"

  - name: set aws secret key
    lineinfile:
      path: /root/.bashrc
      regexp: 'export AWS_SECRET_ACCESS_KEY=.*'
      line: "export AWS_SECRET_ACCESS_KEY={{ lookup( 'env', 'AWS_SECRET_ACCESS_KEY') }}"

  - name: configure ocp
    blockinfile:
      path: /root/.bashrc
      insertafter: EOF
      block: |
        export OCP_CLUSTER_ID={{ tag_name }}
        export ANSIBLE_HOST_KEY_CHECKING=false

  - name: copy ocp anible inventory template
    copy:
      src: "{{ src_ocp_inventory_file }}" 
      dest: "{{ dest_ocp_inventory_file }}"
      owner: root
      group: root
      mode: 0644

  - name: configure inventory
    replace:
      path: "{{ dest_ocp_inventory_file }}"
      regexp: '(PRIVATE_DNS_NAME)'
      replace: "{{ hostvars[inventory_hostname].private_dns_name }}"

  - name: deploy ocp 3.11 (10~20 minutes)
    shell: cd /root/openshift-ansible && git checkout release-3.11 && ansible-playbook -i /root/aws-hosts /root/openshift-ansible/playbooks/deploy_cluster.yml
    register: ocp_cmd
    no_log: true
    ignore_errors: true
    
  - name: print error
    debug: "msg={{ ocp_cmd }}"
    failed_when: ocp_cmd.rc > 0
   
