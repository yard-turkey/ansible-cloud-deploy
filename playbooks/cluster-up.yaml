# Passable Vars (-e 'var1=val1 var2=val2')
#   tag_name (Required)
#   num_node (default: 3)

# Infra play - setup aws resources
- hosts: localhost 
  gather_facts: False
  vars_prompt:
  - name: "tag_name"
    prompt: "Provide a name for instance(s)"
    private: false
  vars:
    env_vars:
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY

  tasks:
  - include_tasks: prerequisites.yaml

  - name: spin up instances
    ec2:
      key_name: "{{ ssh_key }}"
      group_id: "{{ sec_group_id }}" 
      ec2_region: "{{ region  }}" 
      ec2_zone: "{{ zone }}"
      instance_type: "{{ machine_type }}"
      vpc_subnet_id: "{{ subnet_id }}"
      image: "{{ ami_id }}"
      wait: true
      exact_count: "{{ num_nodes }}" 
      count_tag:
        Name: "{{ tag_name }}"
      instance_tags: "{{ {'kubernetes.io/cluster/' ~ tag_name: tag_name, 'Name': tag_name } }}"
    register: ec2

  - add_host:
      hostname: "{{ item.public_dns_name }}"
      public_ip: "{{ item.public_ip }}"
      private_dns_name: "{{ item.private_dns_name  }}"
      private_ip: "{{ item.private_ip }}"
      groups: ec2hosts
    loop: "{{ ec2.instances }}"

  - copy:
      src: "{{ template_ocp_inventory_file }}"
      dest: "{{ src_ocp_inventory_file }}"

  - replace:
      path: "{{ src_ocp_inventory_file }}"
      regexp: '^(openshift_cloudprovider_aws_access_key=)'
      replace: "\\1{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"

  - replace:
      path: "{{ src_ocp_inventory_file }}"
      regexp: '^(openshift_cloudprovider_aws_secret_key=)'
      replace: "\\1{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

  - replace:
      path: "{{ src_ocp_inventory_file }}"
      regexp: '^(openshift_clusterid=)'
      replace: "\\1{{ tag_name }}"

# Pre-deployment
- hosts: ec2hosts
  name: wait for ssh to come up
  remote_user: "{{ ssh_login }}"
  gather_facts: false
  tasks:
  - wait_for_connection:
      delay: 20
      timeout: 120 

# OCP deployment
- hosts: ec2hosts
  name: configuration
  remote_user: "{{ ssh_login }}"
  gather_facts: True
  become: yes
  environment:
    ANSIBLE_HOST_KEY_CHECKING: false
    AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}" 
    AWS_ACCESS_SECRET_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
 
  tasks:
  - name: check docker service
    service: name=docker state=started

  - name: send ocp inventory template to host 
    copy:
      src: "{{ src_ocp_inventory_file }}" 
      dest: "{{ dest_ocp_inventory_file }}"
      owner: root
      group: root
      mode: 0644

  - name: configure inventory host
    replace:
      path: "{{ dest_ocp_inventory_file }}"
      regexp: 'PRIVATE_DNS_NAME'
      replace: "{{ hostvars[inventory_hostname].private_dns_name }}"
  
  - name:
    lineinfile:
      path: /root/.bashrc
      regexp: 'export AWS_ACCESS_KEY_ID=.*'
      line: "export AWS_ACCESS_KEY_ID={{ lookup( 'env', 'AWS_ACCESS_KEY_ID') }}"

  - name: export aws secret key
    lineinfile:
      path: /root/.bashrc
      regexp: 'export AWS_SECRET_ACCESS_KEY=.*'
      line: "export AWS_SECRET_ACCESS_KEY={{ lookup( 'env', 'AWS_SECRET_ACCESS_KEY') }}"

  - name: checkout version branch 3.11
    shell: cd /root/openshift-ansible && git checkout release-3.11

  - name: deploy ocp 3.11 (30-45min runtime)
    shell: cd /root/openshift-ansible && ansible-playbook -i /root/aws-hosts /root/openshift-ansible/playbooks/deploy_cluster.yml
    register: ocp_cmd
    ignore_errors: true 

  - name: oc deploy report
    debug: "msg={{ ocp_cmd.stdout_lines }}"

  - fail: "msg={{ ocp_cmd.stderr }}"
    when: ocp_cmd.rc > 0

  - name: configure ocp AiO cluster
    shell: chmod +x /etc/openshift-dev/config-ocp.sh && /etc/openshift-dev/config-ocp.sh
    register: ocp_config_cmd

  - debug: "msg={{ ocp_config_cmd.stdout_lines }}"

  - fail:
      msg: |
        "Error occured running ocp-config.sh: "
        "{{ ocp_config_cmd.stderr }}"
    when: ocp_config_cmd.rc > 0
